from aiogram import types, Router
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import logging
from PSQL import take_base_info
from filters.castom_filters import MyCustomFilter

inline_router = Router()
inline_router.message.filter(MyCustomFilter(['private']))

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)



def create_keyboard(items, back=True):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫.
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - items: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ç–µ–∫—Å—Ç –∏ callback_data –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏.
    - back: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ InlineKeyboardMarkup.
    """
    keyboard = []
    for item in items:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ items
        keyboard.append([InlineKeyboardButton(text=item['text'], callback_data=item['callback_data'])])
    if back:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥', –µ—Å–ª–∏ —Ñ–ª–∞–≥ back —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ True
        keyboard.append([InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')])
    logger.info(f"{keyboard}")  # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return InlineKeyboardMarkup(inline_keyboard=keyboard)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

@inline_router.message(Command('pos'))
async def buttons_click(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pos.
    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /pos –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä.
    """
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /pos –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", message.from_user.username)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=create_main_keyboard())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

def create_main_keyboard():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='Iphone üì±', callback_data='iphone')],
        [InlineKeyboardButton(text='Ipad ‚å®', callback_data='ipad')],
        [InlineKeyboardButton(text='MacBook üñ•', callback_data='macbook')]
    ])

@inline_router.callback_query()
async def answer_of_saller(callback: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç callback_data –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.
    """
    if callback.data.startswith('~'):
        # –ï—Å–ª–∏ callback_data –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '~', —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É (–Ω–µ–æ–±—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
        # (–ø–æ —Ñ–∞–∫—Ç—É –∫–æ—Å—Ç—ã–ª—å, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—á–µ–º—É-—Ç–æ —á–µ—Ä–µ–∑ F)
        await answer_of_saller(callback)
    else:
        await result_button_click(callback)  # –ò–Ω–∞—á–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

@inline_router.callback_query()
async def result_button_click(callback: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —Ç–æ–≤–∞—Ä–∞.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç callback_data (iphone, ipad, macbook),
    –ø–æ–¥–±–∏—Ä–∞—é—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    if callback.data == 'iphone':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ Iphone
        logger.info(f"iphone {callback.data}")
        items = [
            {'text': 'Iphone 12', 'callback_data': '~iphone_12'},
            {'text': 'Iphone 13', 'callback_data': '~iphone_13'},
            {'text': 'Iphone 14', 'callback_data': '~iphone_14'},
            {'text': 'Iphone 15', 'callback_data': '~iphone_15'}
        ]
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone:', reply_markup=create_keyboard(items))

    elif callback.data == 'ipad':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ iPad
        logger.info(f"ipad {callback.data}")
        items = [
            {'text': 'iPad Pro 12.9 (2021)', 'callback_data': '~ipad_pro'},
            {'text': 'iPad 2020', 'callback_data': '~ipad_2020'},
            {'text': 'iPad mini 2021', 'callback_data': '~ipad_mini'},
            {'text': 'Apple iPad 10.2 (2021)', 'callback_data': '~ipad_10_2'}
        ]
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPad:', reply_markup=create_keyboard(items))

    elif callback.data == 'macbook':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ MacBook
        logger.info(f"macbook {callback.data}")
        items = [
            {'text': 'MacBook Air', 'callback_data': '~macbook_air'},
            {'text': 'MacBook Pro 13"', 'callback_data': '~macbook_pro_13'},
            {'text': 'MacBook Pro 16"', 'callback_data': '~macbook_pro_16'}
        ]
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å MacBook:', reply_markup=create_keyboard(items))

    elif callback.data == 'back':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'
        logger.info(f"back {callback.data}")
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=create_main_keyboard())

@inline_router.callback_query()
async def answer_of_saller(callback: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ callback_data, –æ–±—Ä–∞—â–∞—è—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    logger.info('/take answer')
    result = await take_base_info(callback.data[1:].lower())  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –ø–æ –¥–∞–Ω–Ω—ã–º callback_data
    if result:
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
        for elem in result:
            ans = f"{elem[1]}     –∫–æ–ª-–≤–æ: {elem[2]}      —Ü–≤–µ—Ç: {elem[3]}     –ø–∞–º—è—Ç—å: {elem[4]}"
            await callback.message.answer(ans)
    else:
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
        await callback.message.answer("–¢–æ–≤–∞—Ä –æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç.")

